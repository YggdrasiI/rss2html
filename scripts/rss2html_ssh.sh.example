#!/bin/bash
#
# Allow start of a few commands over SSH. Used for
# rss2html-programm to control this machine, e.g. starts file locally.
# Minimal check of input arguments.
#
# Combine it with entry in .ssh/authorized_keys file:
# command="[path to script]/rss2html_ssh.sh" [SSH KEY]

log_args() {
   echo "`date`: ${SSH_ARGS[@]}" >> /dev/shm/rss2html_ssh.log
}

check_args() {
  log_args

  # Extract command from array
  COMMAND="${SSH_ARGS[0]}"

  # Pop first entry from array
   ARGS=("${SSH_ARGS[@]:1}")

  # Allowed commands: PING, INFO, PLAY, DOWNLOAD
  case "$COMMAND" in
    PING)
      echo "PONG"
      ;;
    INFO)
      print_info "${ARGS[@]}"
        ;;
    PLAY)
      play_mpv "${ARGS[0]}"
      ;;

    PLAY_WITH_AUDIO)  # For yt-dlp
      play_mpv "${ARGS[0]}" --audio-file="${ARGS[1]}"
      ;;

    DOWNLOAD)
      download_wget "${ARGS[0]}"
      ;;
    *)
      echo "Command '$COMMAND' not defined/allowed on ssh server side."
      ;;
esac

}

unquote() {
  # Convert "'s'" to "s" and '"s"' to 's'

  if [ "${1:0:1}" = "'" -a "${1: -1}" = "'" ] ; then
    echo "${1:1: -1}"
  elif [ "${1:0:1}" = '"' -a "${1: -1}" = '"' ] ; then
    echo "${1:1: -1}"
  else
    echo "$1"
  fi
}

print_info() {
  # Splitting avoids too long line for notify-send
  SPLIT_LINE=$(echo "$1" | sed "s/.\{40\}/\0\n/g")
  DISPLAY=:0 nohup notify-send "RSS_VIEWER" "$SPLIT_LINE" &
}

play_mpv() {
  URL=$(unquote "$1")
  echo "INPUT: $@"
  # DISPLAY=:0 mpv $@ 
  DISPLAY=:0 nohup mpv "$@" </dev/null >/dev/null 2>&1 &
  disown
}

play_mpv_singleton() {
  # Only play if mpv is not running
  if [ "$(pgrep mpv)" = "" ] ; then
    play_mpv "$@"
  else
    # Append new file to playlist
    echo "Not implemented"
  fi
}

download_wget() {
  URL=$(unquote "$1")
  nohup sh -c "wget --directory-prefix='/dev/shm/' \"${URL}\" && notify-send \"RSS_VIEWER\" \"Download finished\"" &
  echo "Download of '$URL' started"
}

download_own_script() {
  URL=$(unquote "$1")
  nohup $HOME/bin/downloader.sh "$URL" </dev/null >/dev/null 2>&1 &
  disown
  echo "Download of '$URL' started"
}


if [ -n "$SSH_ORIGINAL_COMMAND" ]
then
    # exec $SSH_ORIGINAL_COMMAND

    # Convert string variable SSH_ORIGINAL_COMMAND into array
    # Attention: spaces between original command args and spaces
    #            in args can not be distinct.
    # Thus, args with spaces will fail!
    IFS=' ' read -r -a SSH_ARGS <<< "${SSH_ORIGINAL_COMMAND}"

    check_args
else
    echo "Environment variable SSH_ORIGINAL_COMMAND not set."
    echo "Fall back on default script arguments."
    
    ## Shift input arguments in other variable

    # A) This would leads to same behavior of if-branch.
    SSH_ORIGINAL_COMMAND="$@"  # Problematic for args with spaces
    IFS=' ' read -r -a SSH_ARGS <<< "${SSH_ORIGINAL_COMMAND}"

    ## B) This is more robust, but hides the difficulties of (A).
    #declare -a SSH_ARGS
    #for arg in "$@" ; 
    #do
    #  index=${#SSH_ARGS[@]}
    #  echo "Index: $index Arg: '$arg'"
    #  SSH_ARGS[$index]="$arg"
    #done
    #echo ${SSH_ARGS[@]}

    check_args
fi
